#LyX 2.2 created this file. For more info see http://www.lyx.org/
\lyxformat 508
\begin_document
\begin_header
\save_transient_properties true
\origin unavailable
\textclass article
\use_default_options true
\maintain_unincluded_children false
\language english
\language_package default
\inputencoding auto
\fontencoding global
\font_roman "default" "default"
\font_sans "default" "default"
\font_typewriter "default" "default"
\font_math "auto" "auto"
\font_default_family default
\use_non_tex_fonts false
\font_sc false
\font_osf false
\font_sf_scale 100 100
\font_tt_scale 100 100
\graphics default
\default_output_format default
\output_sync 0
\bibtex_command default
\index_command default
\paperfontsize default
\use_hyperref false
\papersize default
\use_geometry false
\use_package amsmath 1
\use_package amssymb 1
\use_package cancel 1
\use_package esint 1
\use_package mathdots 1
\use_package mathtools 1
\use_package mhchem 1
\use_package stackrel 1
\use_package stmaryrd 1
\use_package undertilde 1
\cite_engine basic
\cite_engine_type default
\biblio_style plain
\use_bibtopic false
\use_indices false
\paperorientation portrait
\suppress_date false
\justification true
\use_refstyle 1
\index Index
\shortcut idx
\color #008000
\end_index
\secnumdepth 3
\tocdepth 3
\paragraph_separation indent
\paragraph_indentation default
\quotes_language english
\papercolumns 1
\papersides 1
\paperpagestyle default
\tracking_changes false
\output_changes false
\html_math_output 0
\html_css_as_file 0
\html_be_strict false
\end_header

\begin_body

\begin_layout Part*
ex1 - Lior Ziv
\end_layout

\begin_layout Subsection*
Q1.a
\end_layout

\begin_layout Standard
I added another property which is not mentioned in your description, suffTree{i}
{4} will hold the leaf label or and empty cell if it's an internal node.
\end_layout

\begin_layout Subsection*
Q1.c.2
\end_layout

\begin_layout Standard
The degree is 2, The time complexity is polynomial O(n
\begin_inset Formula $^{2})$
\end_inset


\end_layout

\begin_layout Subsection*
Q1.c.3
\end_layout

\begin_layout Standard
The actual time was = 43.9 seconds, the predicted time was 48.85 seconds.
\end_layout

\begin_layout Subsection*
Q3.a
\end_layout

\begin_layout Itemize
I would suggest an algorithm that allows at most K mismatches.
\end_layout

\begin_deeper
\begin_layout Standard
For a given read(R) and a sequence it builds the sequence suffix tree and
 than work as follows:
\end_layout

\begin_layout Standard
Find the largest common part(LCA) - lowest common ancestor, for each suffix
 of the sequence and R.
 
\end_layout

\begin_layout Standard
After finding the LCA the strings split which means there is one mismatch(the
 next letter most be different)
\end_layout

\begin_layout Standard
The next move will be taking R{splitPoint + 1:end} ,suffix{{splitPoint +
 1:end} and start again running on the suffix tree from the root.
\end_layout

\begin_layout Standard
For every split we add one mismatch and start again until r is empty.
 At the end we check if the amount of mismatches < K and only those suffixes
 are saved.
\end_layout

\end_deeper
\begin_layout Standard

\series bold
\bar under
pseudo code
\end_layout

\begin_layout Itemize
k-mismatches(r,sequence):
\end_layout

\begin_deeper
\begin_layout Standard
ST = initialize(sequence)
\end_layout

\begin_layout Standard
result = {}
\end_layout

\begin_layout Itemize
for each suffix in sequence:
\end_layout

\begin_deeper
\begin_layout Itemize
[counter,indexes] = k-mismatchHelper(r,sequence,counter,k)
\end_layout

\begin_layout Itemize
if(counter < k) , add to indexes to results
\end_layout

\begin_layout Itemize
return results
\end_layout

\end_deeper
\end_deeper
\begin_layout Itemize
k-mismatchHelper(r,sequence,counter)
\end_layout

\begin_deeper
\begin_layout Itemize
if(isempty(r)) - return
\end_layout

\begin_layout Itemize
splitPoint = find LCA(suffix,r)
\end_layout

\begin_layout Itemize
r=r{splitPoint + 1:end} ,s=suffix{{splitPoint + 1:end}
\end_layout

\begin_layout Itemize
raise mismatch counter by 1
\end_layout

\begin_layout Itemize
counter = k-mismatchHelper(r,sequence,counter)
\end_layout

\begin_layout Itemize
if(counter < k)
\end_layout

\begin_layout Itemize
return (index ,index + length(r) -1)
\end_layout

\begin_layout Subsection*
Q3.b
\end_layout

\end_deeper
\begin_layout Itemize
The algorithm took every suffix of the sequence O(length(sequence)), and
 moved with it along the tree up to the depth of r O(length(r)) which means
 we get a total running time
\end_layout

\begin_deeper
\begin_layout Standard
of O(length(sequence)*length(r))
\end_layout

\end_deeper
\end_body
\end_document
